import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.networknt.schema.ValidationMessage;
import org.junit.jupiter.api.Test;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.util.Set;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class JsonSchemaValidatorTest {

    private static JsonSchema getSchema(String schemaPath) throws Exception {
        InputStream schemaStream = JsonSchemaValidatorTest.class.getResourceAsStream(schemaPath);
        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);
        return factory.getSchema(schemaStream);
    }

    private static JsonNode getJsonNode(String jsonPath) throws Exception {
        InputStream jsonStream = JsonSchemaValidatorTest.class.getResourceAsStream(jsonPath);
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readTree(jsonStream);
    }

    private static Set<String> validateJson(JsonSchema schema, JsonNode jsonNode) {
        Set<ValidationMessage> errors = schema.validate(jsonNode);
        return errors.stream()
                .map(error -> error.getMessage().replace("$.","").trim())
                .collect(Collectors.toSet());
    }

    @Test
    public void testValidAcceptedDecision() throws Exception {
        JsonSchema schema = getSchema("/schema.json");
        JsonNode jsonNode = getJsonNode("/validAcceptedDecision.json");

        Set<String> errors = validateJson(schema, jsonNode);
        assertTrue(errors.isEmpty(), "Expected no validation errors, but found: " + errors);
    }

    @Test
    public void testValidRejectedDecision() throws Exception {
        JsonSchema schema = getSchema("/schema.json");
        JsonNode jsonNode = getJsonNode("/validRejectedDecision.json");

        Set<String> errors = validateJson(schema, jsonNode);
        assertTrue(errors.isEmpty(), "Expected no validation errors, but found: " + errors);
    }

    @Test
    public void testInvalidAcceptedDecision() throws Exception {
        JsonSchema schema = getSchema("/schema.json");
        JsonNode jsonNode = getJsonNode("/invalidAcceptedDecision.json");

        Set<String> errors = validateJson(schema, jsonNode);
        assertFalse(errors.isEmpty(), "Expected validation errors, but found none");

        // Assert specific error messages
        assertTrue(errors.contains("RejectionCode: must be null"), "Expected error message about RejectionCode being null, but found: " + errors);
        assertTrue(errors.contains("AdditionalComments: must be null"), "Expected error message about AdditionalComments being null, but found: " + errors);
    }

    @Test
    public void testInvalidRejectedDecision() throws Exception {
        JsonSchema schema = getSchema("/schema.json");
        JsonNode jsonNode = getJsonNode("/invalidRejectedDecision.json");

        Set<String> errors = validateJson(schema, jsonNode);
        assertFalse(errors.isEmpty(), "Expected validation errors, but found none");

        // Assert specific error messages
        assertTrue(errors.contains("RejectionCode: required key [RejectionCode] not found"), "Expected error message about RejectionCode being missing, but found: " + errors);
        assertTrue(errors.contains("AdditionalComments: required key [AdditionalComments] not found"), "Expected error message about AdditionalComments being missing, but found: " + errors);
    }
}
