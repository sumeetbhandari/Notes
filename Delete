package com.example.jsonvalidator;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.networknt.schema.ValidationMessage;

import java.io.InputStream;
import java.util.Set;
import java.util.stream.Collectors;

public class JSONSchemaValidatorUtility {

    private static final ObjectMapper mapper = new ObjectMapper();

    public static JsonSchema getSchema(String schemaPath) throws Exception {
        InputStream schemaStream = JSONSchemaValidatorUtility.class.getResourceAsStream(schemaPath);
        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);
        return factory.getSchema(schemaStream);
    }

    public static JsonNode getJsonNode(String jsonPath) throws Exception {
        InputStream jsonStream = JSONSchemaValidatorUtility.class.getResourceAsStream(jsonPath);
        return mapper.readTree(jsonStream);
    }

    public static Set<ValidationMessage> validateJson(JsonSchema schema, JsonNode jsonNode) {
        return schema.validate(jsonNode);
    }

    public static void printValidationMessages(Set<ValidationMessage> validationMessages) {
        if (validationMessages.isEmpty()) {
            System.out.println("Validation passed: No errors found.");
        } else {
            System.out.println("Validation failed with the following errors:");
            Set<String> formattedMessages = validationMessages.stream()
                .map(error -> error.getMessage().replace("$.","").trim())
                .collect(Collectors.toSet());
            formattedMessages.forEach(error -> System.out.println("Validation error: " + error));
        }
    }

    public static void main(String[] args) throws Exception {
        JsonSchema schema = getSchema("/schema.json");

        JsonNode validAcceptedJson = getJsonNode("/validAcceptedDecision.json");
        Set<ValidationMessage> errors = validateJson(schema, validAcceptedJson);
        printValidationMessages(errors);

        JsonNode validRejectedJson = getJsonNode("/validRejectedDecision.json");
        errors = validateJson(schema, validRejectedJson);
        printValidationMessages(errors);

        JsonNode invalidAcceptedJson = getJsonNode("/invalidAcceptedDecision.json");
        errors = validateJson(schema, invalidAcceptedJson);
        printValidationMessages(errors);

        JsonNode invalidRejectedJson = getJsonNode("/invalidRejectedDecision.json");
        errors = validateJson(schema, invalidRejectedJson);
        printValidationMessages(errors);
    }
}
    
